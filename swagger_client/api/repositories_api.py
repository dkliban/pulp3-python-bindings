# coding: utf-8

"""
    Pulp3 API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RepositoriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def repositories_create(self, data, **kwargs):  # noqa: E501
        """repositories_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_create(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param Repository data: (required)
        :return: Repository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_create_with_http_info(data, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_create_with_http_info(data, **kwargs)  # noqa: E501
            return data

    def repositories_create_with_http_info(self, data, **kwargs):  # noqa: E501
        """repositories_create  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_create_with_http_info(data, async=True)
        >>> result = thread.get()

        :param async bool
        :param Repository data: (required)
        :return: Repository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `repositories_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Repository',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_delete(self, id, **kwargs):  # noqa: E501
        """repositories_delete  # noqa: E501

        Generates a Task to delete a Repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_delete(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this repository. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def repositories_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """repositories_delete  # noqa: E501

        Generates a Task to delete a Repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_delete_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this repository. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `repositories_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_list(self, **kwargs):  # noqa: E501
        """repositories_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: 
        :param str name__in: Multiple values may be separated by commas.
        :param str cursor: The pagination cursor value.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.repositories_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def repositories_list_with_http_info(self, **kwargs):  # noqa: E501
        """repositories_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: 
        :param str name__in: Multiple values may be separated by commas.
        :param str cursor: The pagination cursor value.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'name__in', 'cursor']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'name__in' in params:
            query_params.append(('name__in', params['name__in']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_partial_update(self, id, data, **kwargs):  # noqa: E501
        """repositories_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_partial_update(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this repository. (required)
        :param Repository data: (required)
        :return: Repository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_partial_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def repositories_partial_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """repositories_partial_update  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_partial_update_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this repository. (required)
        :param Repository data: (required)
        :return: Repository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `repositories_partial_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `repositories_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Repository',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_read(self, id, **kwargs):  # noqa: E501
        """repositories_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_read(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this repository. (required)
        :return: Repository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_read_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_read_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def repositories_read_with_http_info(self, id, **kwargs):  # noqa: E501
        """repositories_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_read_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this repository. (required)
        :return: Repository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `repositories_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Repository',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_update(self, id, data, **kwargs):  # noqa: E501
        """repositories_update  # noqa: E501

        Generates a Task to update a Repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_update(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this repository. (required)
        :param Repository data: (required)
        :return: Repository
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_update_with_http_info(id, data, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_update_with_http_info(id, data, **kwargs)  # noqa: E501
            return data

    def repositories_update_with_http_info(self, id, data, **kwargs):  # noqa: E501
        """repositories_update  # noqa: E501

        Generates a Task to update a Repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_update_with_http_info(id, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: A UUID string identifying this repository. (required)
        :param Repository data: (required)
        :return: Repository
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `repositories_update`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `repositories_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Repository',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_versions_added_content(self, repository_pk, number, **kwargs):  # noqa: E501
        """repositories_versions_added_content  # noqa: E501

        Display content added since the previous Repository Version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_added_content(repository_pk, number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param int number: (required)
        :return: RepositoryVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_versions_added_content_with_http_info(repository_pk, number, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_versions_added_content_with_http_info(repository_pk, number, **kwargs)  # noqa: E501
            return data

    def repositories_versions_added_content_with_http_info(self, repository_pk, number, **kwargs):  # noqa: E501
        """repositories_versions_added_content  # noqa: E501

        Display content added since the previous Repository Version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_added_content_with_http_info(repository_pk, number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param int number: (required)
        :return: RepositoryVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_pk', 'number']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_versions_added_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_pk' is set
        if ('repository_pk' not in params or
                params['repository_pk'] is None):
            raise ValueError("Missing the required parameter `repository_pk` when calling `repositories_versions_added_content`")  # noqa: E501
        # verify the required parameter 'number' is set
        if ('number' not in params or
                params['number'] is None):
            raise ValueError("Missing the required parameter `number` when calling `repositories_versions_added_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_pk' in params:
            path_params['repository_pk'] = params['repository_pk']  # noqa: E501
        if 'number' in params:
            path_params['number'] = params['number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repository_pk}/versions/{number}/added_content/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepositoryVersion',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_versions_content(self, repository_pk, number, **kwargs):  # noqa: E501
        """repositories_versions_content  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_content(repository_pk, number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param int number: (required)
        :return: RepositoryVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_versions_content_with_http_info(repository_pk, number, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_versions_content_with_http_info(repository_pk, number, **kwargs)  # noqa: E501
            return data

    def repositories_versions_content_with_http_info(self, repository_pk, number, **kwargs):  # noqa: E501
        """repositories_versions_content  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_content_with_http_info(repository_pk, number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param int number: (required)
        :return: RepositoryVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_pk', 'number']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_versions_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_pk' is set
        if ('repository_pk' not in params or
                params['repository_pk'] is None):
            raise ValueError("Missing the required parameter `repository_pk` when calling `repositories_versions_content`")  # noqa: E501
        # verify the required parameter 'number' is set
        if ('number' not in params or
                params['number'] is None):
            raise ValueError("Missing the required parameter `number` when calling `repositories_versions_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_pk' in params:
            path_params['repository_pk'] = params['repository_pk']  # noqa: E501
        if 'number' in params:
            path_params['number'] = params['number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repository_pk}/versions/{number}/content/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepositoryVersion',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_versions_create(self, repository_pk, data, **kwargs):  # noqa: E501
        """repositories_versions_create  # noqa: E501

        Queues a task that creates a new RepositoryVersion by adding and removing content units  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_create(repository_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param RepositoryVersion data: (required)
        :return: RepositoryVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_versions_create_with_http_info(repository_pk, data, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_versions_create_with_http_info(repository_pk, data, **kwargs)  # noqa: E501
            return data

    def repositories_versions_create_with_http_info(self, repository_pk, data, **kwargs):  # noqa: E501
        """repositories_versions_create  # noqa: E501

        Queues a task that creates a new RepositoryVersion by adding and removing content units  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_create_with_http_info(repository_pk, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param RepositoryVersion data: (required)
        :return: RepositoryVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_pk', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_versions_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_pk' is set
        if ('repository_pk' not in params or
                params['repository_pk'] is None):
            raise ValueError("Missing the required parameter `repository_pk` when calling `repositories_versions_create`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `repositories_versions_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_pk' in params:
            path_params['repository_pk'] = params['repository_pk']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repository_pk}/versions/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepositoryVersion',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_versions_delete(self, repository_pk, number, **kwargs):  # noqa: E501
        """repositories_versions_delete  # noqa: E501

        Queues a task to handle deletion of a RepositoryVersion  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_delete(repository_pk, number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param int number: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_versions_delete_with_http_info(repository_pk, number, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_versions_delete_with_http_info(repository_pk, number, **kwargs)  # noqa: E501
            return data

    def repositories_versions_delete_with_http_info(self, repository_pk, number, **kwargs):  # noqa: E501
        """repositories_versions_delete  # noqa: E501

        Queues a task to handle deletion of a RepositoryVersion  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_delete_with_http_info(repository_pk, number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param int number: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_pk', 'number']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_versions_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_pk' is set
        if ('repository_pk' not in params or
                params['repository_pk'] is None):
            raise ValueError("Missing the required parameter `repository_pk` when calling `repositories_versions_delete`")  # noqa: E501
        # verify the required parameter 'number' is set
        if ('number' not in params or
                params['number'] is None):
            raise ValueError("Missing the required parameter `number` when calling `repositories_versions_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_pk' in params:
            path_params['repository_pk'] = params['repository_pk']  # noqa: E501
        if 'number' in params:
            path_params['number'] = params['number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repository_pk}/versions/{number}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_versions_list(self, repository_pk, **kwargs):  # noqa: E501
        """repositories_versions_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_list(repository_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param str ordering: Which field to use when ordering the results.
        :param float number: 
        :param float number__lt: 
        :param float number__lte: 
        :param float number__gt: 
        :param float number__gte: 
        :param float number__range: Multiple values may be separated by commas.
        :param str created__lt: 
        :param str created__lte: 
        :param str created__gt: 
        :param str created__gte: 
        :param str created__range: Multiple values may be separated by commas.
        :param str content: Content Unit referenced by HREF
        :param str created: 
        :param str cursor: The pagination cursor value.
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_versions_list_with_http_info(repository_pk, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_versions_list_with_http_info(repository_pk, **kwargs)  # noqa: E501
            return data

    def repositories_versions_list_with_http_info(self, repository_pk, **kwargs):  # noqa: E501
        """repositories_versions_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_list_with_http_info(repository_pk, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param str ordering: Which field to use when ordering the results.
        :param float number: 
        :param float number__lt: 
        :param float number__lte: 
        :param float number__gt: 
        :param float number__gte: 
        :param float number__range: Multiple values may be separated by commas.
        :param str created__lt: 
        :param str created__lte: 
        :param str created__gt: 
        :param str created__gte: 
        :param str created__range: Multiple values may be separated by commas.
        :param str content: Content Unit referenced by HREF
        :param str created: 
        :param str cursor: The pagination cursor value.
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_pk', 'ordering', 'number', 'number__lt', 'number__lte', 'number__gt', 'number__gte', 'number__range', 'created__lt', 'created__lte', 'created__gt', 'created__gte', 'created__range', 'content', 'created', 'cursor']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_versions_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_pk' is set
        if ('repository_pk' not in params or
                params['repository_pk'] is None):
            raise ValueError("Missing the required parameter `repository_pk` when calling `repositories_versions_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_pk' in params:
            path_params['repository_pk'] = params['repository_pk']  # noqa: E501

        query_params = []
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'number' in params:
            query_params.append(('number', params['number']))  # noqa: E501
        if 'number__lt' in params:
            query_params.append(('number__lt', params['number__lt']))  # noqa: E501
        if 'number__lte' in params:
            query_params.append(('number__lte', params['number__lte']))  # noqa: E501
        if 'number__gt' in params:
            query_params.append(('number__gt', params['number__gt']))  # noqa: E501
        if 'number__gte' in params:
            query_params.append(('number__gte', params['number__gte']))  # noqa: E501
        if 'number__range' in params:
            query_params.append(('number__range', params['number__range']))  # noqa: E501
        if 'created__lt' in params:
            query_params.append(('created__lt', params['created__lt']))  # noqa: E501
        if 'created__lte' in params:
            query_params.append(('created__lte', params['created__lte']))  # noqa: E501
        if 'created__gt' in params:
            query_params.append(('created__gt', params['created__gt']))  # noqa: E501
        if 'created__gte' in params:
            query_params.append(('created__gte', params['created__gte']))  # noqa: E501
        if 'created__range' in params:
            query_params.append(('created__range', params['created__range']))  # noqa: E501
        if 'content' in params:
            query_params.append(('content', params['content']))  # noqa: E501
        if 'created' in params:
            query_params.append(('created', params['created']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repository_pk}/versions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_versions_read(self, repository_pk, number, **kwargs):  # noqa: E501
        """repositories_versions_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_read(repository_pk, number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param int number: (required)
        :return: RepositoryVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_versions_read_with_http_info(repository_pk, number, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_versions_read_with_http_info(repository_pk, number, **kwargs)  # noqa: E501
            return data

    def repositories_versions_read_with_http_info(self, repository_pk, number, **kwargs):  # noqa: E501
        """repositories_versions_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_read_with_http_info(repository_pk, number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param int number: (required)
        :return: RepositoryVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_pk', 'number']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_versions_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_pk' is set
        if ('repository_pk' not in params or
                params['repository_pk'] is None):
            raise ValueError("Missing the required parameter `repository_pk` when calling `repositories_versions_read`")  # noqa: E501
        # verify the required parameter 'number' is set
        if ('number' not in params or
                params['number'] is None):
            raise ValueError("Missing the required parameter `number` when calling `repositories_versions_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_pk' in params:
            path_params['repository_pk'] = params['repository_pk']  # noqa: E501
        if 'number' in params:
            path_params['number'] = params['number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repository_pk}/versions/{number}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepositoryVersion',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def repositories_versions_removed_content(self, repository_pk, number, **kwargs):  # noqa: E501
        """repositories_versions_removed_content  # noqa: E501

        Display content removed since the previous Repository Version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_removed_content(repository_pk, number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param int number: (required)
        :return: RepositoryVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.repositories_versions_removed_content_with_http_info(repository_pk, number, **kwargs)  # noqa: E501
        else:
            (data) = self.repositories_versions_removed_content_with_http_info(repository_pk, number, **kwargs)  # noqa: E501
            return data

    def repositories_versions_removed_content_with_http_info(self, repository_pk, number, **kwargs):  # noqa: E501
        """repositories_versions_removed_content  # noqa: E501

        Display content removed since the previous Repository Version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.repositories_versions_removed_content_with_http_info(repository_pk, number, async=True)
        >>> result = thread.get()

        :param async bool
        :param str repository_pk: (required)
        :param int number: (required)
        :return: RepositoryVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_pk', 'number']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method repositories_versions_removed_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_pk' is set
        if ('repository_pk' not in params or
                params['repository_pk'] is None):
            raise ValueError("Missing the required parameter `repository_pk` when calling `repositories_versions_removed_content`")  # noqa: E501
        # verify the required parameter 'number' is set
        if ('number' not in params or
                params['number'] is None):
            raise ValueError("Missing the required parameter `number` when calling `repositories_versions_removed_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_pk' in params:
            path_params['repository_pk'] = params['repository_pk']  # noqa: E501
        if 'number' in params:
            path_params['number'] = params['number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/repositories/{repository_pk}/versions/{number}/removed_content/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepositoryVersion',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
