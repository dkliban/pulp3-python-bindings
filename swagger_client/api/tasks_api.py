# coding: utf-8

"""
    Pulp3 API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TasksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def tasks_cancel(self, href, data, **kwargs):  # noqa: E501
        """tasks_cancel  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tasks_cancel(href, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str href: A relative URI for the resource. (required)
        :param Task data: (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.tasks_cancel_with_http_info(href, data, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_cancel_with_http_info(href, data, **kwargs)  # noqa: E501
            return data

    def tasks_cancel_with_http_info(self, href, data, **kwargs):  # noqa: E501
        """tasks_cancel  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tasks_cancel_with_http_info(href, data, async=True)
        >>> result = thread.get()

        :param async bool
        :param str href: A relative URI for the resource. (required)
        :param Task data: (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['href', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_cancel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'href' is set
        if ('href' not in params or
                params['href'] is None):
            raise ValueError("Missing the required parameter `href` when calling `tasks_cancel`")  # noqa: E501
        # verify the required parameter 'data' is set
        if ('data' not in params or
                params['data'] is None):
            raise ValueError("Missing the required parameter `data` when calling `tasks_cancel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'href' in params:
            path_params['href'] = params['href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '{href}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_delete(self, href, **kwargs):  # noqa: E501
        """tasks_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tasks_delete(href, async=True)
        >>> result = thread.get()

        :param async bool
        :param str href: A relative URI for the resource. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.tasks_delete_with_http_info(href, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_delete_with_http_info(href, **kwargs)  # noqa: E501
            return data

    def tasks_delete_with_http_info(self, href, **kwargs):  # noqa: E501
        """tasks_delete  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tasks_delete_with_http_info(href, async=True)
        >>> result = thread.get()

        :param async bool
        :param str href: A relative URI for the resource. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['href']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'href' is set
        if ('href' not in params or
                params['href'] is None):
            raise ValueError("Missing the required parameter `href` when calling `tasks_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'href' in params:
            path_params['href'] = params['href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '{href}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_list(self, **kwargs):  # noqa: E501
        """tasks_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tasks_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param str ordering: Which field to use when ordering the results.
        :param str state: 
        :param str state__in: Multiple values may be separated by commas.
        :param str worker: Foreign Key referenced by HREF
        :param str worker__in: Multiple values may be separated by commas.
        :param str started_at__lt: 
        :param str started_at__lte: 
        :param str started_at__gt: 
        :param str started_at__gte: 
        :param str started_at__range: Multiple values may be separated by commas.
        :param str finished_at__lt: 
        :param str finished_at__lte: 
        :param str finished_at__gt: 
        :param str finished_at__gte: 
        :param str finished_at__range: Multiple values may be separated by commas.
        :param str parent: Foreign Key referenced by HREF
        :param str started_at: 
        :param str finished_at: 
        :param str cursor: The pagination cursor value.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.tasks_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.tasks_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def tasks_list_with_http_info(self, **kwargs):  # noqa: E501
        """tasks_list  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tasks_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str ordering: Which field to use when ordering the results.
        :param str state: 
        :param str state__in: Multiple values may be separated by commas.
        :param str worker: Foreign Key referenced by HREF
        :param str worker__in: Multiple values may be separated by commas.
        :param str started_at__lt: 
        :param str started_at__lte: 
        :param str started_at__gt: 
        :param str started_at__gte: 
        :param str started_at__range: Multiple values may be separated by commas.
        :param str finished_at__lt: 
        :param str finished_at__lte: 
        :param str finished_at__gt: 
        :param str finished_at__gte: 
        :param str finished_at__range: Multiple values may be separated by commas.
        :param str parent: Foreign Key referenced by HREF
        :param str started_at: 
        :param str finished_at: 
        :param str cursor: The pagination cursor value.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ordering', 'state', 'state__in', 'worker', 'worker__in', 'started_at__lt', 'started_at__lte', 'started_at__gt', 'started_at__gte', 'started_at__range', 'finished_at__lt', 'finished_at__lte', 'finished_at__gt', 'finished_at__gte', 'finished_at__range', 'parent', 'started_at', 'finished_at', 'cursor']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ordering' in params:
            query_params.append(('ordering', params['ordering']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'state__in' in params:
            query_params.append(('state__in', params['state__in']))  # noqa: E501
        if 'worker' in params:
            query_params.append(('worker', params['worker']))  # noqa: E501
        if 'worker__in' in params:
            query_params.append(('worker__in', params['worker__in']))  # noqa: E501
        if 'started_at__lt' in params:
            query_params.append(('started_at__lt', params['started_at__lt']))  # noqa: E501
        if 'started_at__lte' in params:
            query_params.append(('started_at__lte', params['started_at__lte']))  # noqa: E501
        if 'started_at__gt' in params:
            query_params.append(('started_at__gt', params['started_at__gt']))  # noqa: E501
        if 'started_at__gte' in params:
            query_params.append(('started_at__gte', params['started_at__gte']))  # noqa: E501
        if 'started_at__range' in params:
            query_params.append(('started_at__range', params['started_at__range']))  # noqa: E501
        if 'finished_at__lt' in params:
            query_params.append(('finished_at__lt', params['finished_at__lt']))  # noqa: E501
        if 'finished_at__lte' in params:
            query_params.append(('finished_at__lte', params['finished_at__lte']))  # noqa: E501
        if 'finished_at__gt' in params:
            query_params.append(('finished_at__gt', params['finished_at__gt']))  # noqa: E501
        if 'finished_at__gte' in params:
            query_params.append(('finished_at__gte', params['finished_at__gte']))  # noqa: E501
        if 'finished_at__range' in params:
            query_params.append(('finished_at__range', params['finished_at__range']))  # noqa: E501
        if 'parent' in params:
            query_params.append(('parent', params['parent']))  # noqa: E501
        if 'started_at' in params:
            query_params.append(('started_at', params['started_at']))  # noqa: E501
        if 'finished_at' in params:
            query_params.append(('finished_at', params['finished_at']))  # noqa: E501
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '/tasks/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def tasks_read(self, href, **kwargs):  # noqa: E501
        """tasks_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tasks_read(href, async=True)
        >>> result = thread.get()

        :param async bool
        :param str href: A relative URI for the resource. (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.tasks_read_with_http_info(href, **kwargs)  # noqa: E501
        else:
            (data) = self.tasks_read_with_http_info(href, **kwargs)  # noqa: E501
            return data

    def tasks_read_with_http_info(self, href, **kwargs):  # noqa: E501
        """tasks_read  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.tasks_read_with_http_info(href, async=True)
        >>> result = thread.get()

        :param async bool
        :param str href: A relative URI for the resource. (required)
        :return: Task
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['href']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method tasks_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'href' is set
        if ('href' not in params or
                params['href'] is None):
            raise ValueError("Missing the required parameter `href` when calling `tasks_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'href' in params:
            path_params['href'] = params['href']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basic']  # noqa: E501

        return self.api_client.call_api(
            '{href}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Task',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
