# coding: utf-8

"""
    Pulp3 API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Distribution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'href': 'str',
        'created': 'datetime',
        'name': 'str',
        'base_path': 'str',
        'publisher': 'str',
        'publication': 'str',
        'base_url': 'str',
        'repository': 'str'
    }

    attribute_map = {
        'href': '_href',
        'created': 'created',
        'name': 'name',
        'base_path': 'base_path',
        'publisher': 'publisher',
        'publication': 'publication',
        'base_url': 'base_url',
        'repository': 'repository'
    }

    def __init__(self, href=None, created=None, name=None, base_path=None, publisher=None, publication=None, base_url=None, repository=None):  # noqa: E501
        """Distribution - a model defined in Swagger"""  # noqa: E501

        self._href = None
        self._created = None
        self._name = None
        self._base_path = None
        self._publisher = None
        self._publication = None
        self._base_url = None
        self._repository = None
        self.discriminator = None

        if href is not None:
            self.href = href
        if created is not None:
            self.created = created
        self.name = name
        self.base_path = base_path
        if publisher is not None:
            self.publisher = publisher
        if publication is not None:
            self.publication = publication
        if base_url is not None:
            self.base_url = base_url
        if repository is not None:
            self.repository = repository

    @property
    def href(self):
        """Gets the href of this Distribution.  # noqa: E501


        :return: The href of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Distribution.


        :param href: The href of this Distribution.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def created(self):
        """Gets the created of this Distribution.  # noqa: E501

        Timestamp of creation.  # noqa: E501

        :return: The created of this Distribution.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Distribution.

        Timestamp of creation.  # noqa: E501

        :param created: The created of this Distribution.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def name(self):
        """Gets the name of this Distribution.  # noqa: E501

        The name of the distribution. Ex, `rawhide` and `stable`.  # noqa: E501

        :return: The name of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Distribution.

        The name of the distribution. Ex, `rawhide` and `stable`.  # noqa: E501

        :param name: The name of this Distribution.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501

        self._name = name

    @property
    def base_path(self):
        """Gets the base_path of this Distribution.  # noqa: E501

        The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")  # noqa: E501

        :return: The base_path of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this Distribution.

        The base (relative) path component of the published url. Avoid paths that                     overlap with other distribution base paths (e.g. \"foo\" and \"foo/bar\")  # noqa: E501

        :param base_path: The base_path of this Distribution.  # noqa: E501
        :type: str
        """
        if base_path is None:
            raise ValueError("Invalid value for `base_path`, must not be `None`")  # noqa: E501
        if base_path is not None and len(base_path) > 255:
            raise ValueError("Invalid value for `base_path`, length must be less than or equal to `255`")  # noqa: E501

        self._base_path = base_path

    @property
    def publisher(self):
        """Gets the publisher of this Distribution.  # noqa: E501

        Publications created by this publisher and repository are automaticallyserved as defined by this distribution  # noqa: E501

        :return: The publisher of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Distribution.

        Publications created by this publisher and repository are automaticallyserved as defined by this distribution  # noqa: E501

        :param publisher: The publisher of this Distribution.  # noqa: E501
        :type: str
        """

        self._publisher = publisher

    @property
    def publication(self):
        """Gets the publication of this Distribution.  # noqa: E501

        The publication being served as defined by this distribution  # noqa: E501

        :return: The publication of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._publication

    @publication.setter
    def publication(self, publication):
        """Sets the publication of this Distribution.

        The publication being served as defined by this distribution  # noqa: E501

        :param publication: The publication of this Distribution.  # noqa: E501
        :type: str
        """

        self._publication = publication

    @property
    def base_url(self):
        """Gets the base_url of this Distribution.  # noqa: E501

        The URL for accessing the publication as defined by this distribution.  # noqa: E501

        :return: The base_url of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this Distribution.

        The URL for accessing the publication as defined by this distribution.  # noqa: E501

        :param base_url: The base_url of this Distribution.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def repository(self):
        """Gets the repository of this Distribution.  # noqa: E501

        Publications created by this repository and publisher are automaticallyserved as defined by this distribution  # noqa: E501

        :return: The repository of this Distribution.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this Distribution.

        Publications created by this repository and publisher are automaticallyserved as defined by this distribution  # noqa: E501

        :param repository: The repository of this Distribution.  # noqa: E501
        :type: str
        """

        self._repository = repository

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Distribution):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
